{
  "log" : {
    "version" : "1.2",
    "creator" : {
      "name" : "BrowserMob Proxy",
      "version" : "2.1.5",
      "comment" : ""
    },
    "pages" : [ {
      "id" : "Page 0",
      "startedDateTime" : "2019-08-26T14:58:19.304Z",
      "title" : "Page 0",
      "pageTimings" : {
        "onLoad" : 925,
        "comment" : ""
      },
      "comment" : ""
    } ],
    "entries" : [ {
      "pageref" : "Page 0",
      "startedDateTime" : "2019-08-26T14:58:19.936Z",
      "request" : {
        "method" : "GET",
        "url" : "https://www.api.org/library/APIWeb/js/homepage.js",
        "httpVersion" : "HTTP/1.1",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "User-Agent",
          "value" : "Katalon Studio"
        }, {
          "name" : "Host",
          "value" : "www.api.org"
        }, {
          "name" : "Accept",
          "value" : "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2"
        }, {
          "name" : "Connection",
          "value" : "keep-alive"
        } ],
        "queryString" : [ ],
        "headersSize" : 182,
        "bodySize" : 0,
        "comment" : ""
      },
      "response" : {
        "status" : 200,
        "statusText" : "OK",
        "httpVersion" : "HTTP/1.1",
        "cookies" : [ {
          "name" : "BNI_BARRACUDA_LB_COOKIE",
          "value" : "00000000000000000000000056021aac0000bb01",
          "path" : "/",
          "httpOnly" : true,
          "secure" : false,
          "comment" : ""
        } ],
        "headers" : [ {
          "name" : "Cache-Control",
          "value" : "max-age=604800"
        }, {
          "name" : "Content-Type",
          "value" : "application/javascript"
        }, {
          "name" : "Last-Modified",
          "value" : "Wed, 16 Mar 2016 17:21:27 GMT"
        }, {
          "name" : "Accept-Ranges",
          "value" : "bytes"
        }, {
          "name" : "ETag",
          "value" : "\"6a8a446a87fd11:0\""
        }, {
          "name" : "Server",
          "value" : "Microsoft-IIS/8.5"
        }, {
          "name" : "X-UA-Compatible",
          "value" : "IE=Edge"
        }, {
          "name" : "API",
          "value" : "API"
        }, {
          "name" : "Date",
          "value" : "Mon, 26 Aug 2019 14:58:19 GMT"
        }, {
          "name" : "Content-Length",
          "value" : "8305"
        }, {
          "name" : "Set-Cookie",
          "value" : "BNI_BARRACUDA_LB_COOKIE=00000000000000000000000056021aac0000bb01; Path=/; HttpOnly"
        } ],
        "content" : {
          "size" : 8305,
          "mimeType" : "application/javascript",
          "text" : "\r\n/**\r\n * @author       Rob W <gwnRob@gmail.com>\r\n * @website      http://stackoverflow.com/a/7513356/938089*/\r\n\r\n$(\"#myCarousel\").swiperight(function() {\r\n  $(this).carousel('prev');\r\n});\r\n$(\"#myCarousel\").swipeleft(function() {\r\n  $(this).carousel('next');\r\n});\r\n\r\n\r\n if ( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) != true ) {\r\n\r\n   if ( $('#frame1').length ) {\r\n     var iframe1 = document.createElement('iframe');\r\n     var iframe1Source = document.getElementById('frame1').getAttribute('data-youtube-source');\r\n     iframe1.setAttribute(\"src\", iframe1Source);\r\n     iframe1.setAttribute(\"id\", \"frame1\");\r\n     iframe1.setAttribute(\"class\", \"player\");\r\n     $('#frame1').replaceWith(iframe1);\r\n   }\r\n\r\n   if ( $('#frame2').length ) {\r\n     var iframe2 = document.createElement('iframe');\r\n     var iframe2Source = document.getElementById('frame2').getAttribute('data-youtube-source');\r\n     iframe2.setAttribute(\"src\", iframe2Source);\r\n     iframe2.setAttribute(\"id\", \"frame2\");\r\n     iframe2.setAttribute(\"class\", \"player\");\r\n     $('#frame2').replaceWith(iframe2);\r\n   }\r\n }\r\n\r\n\r\nif ( $('#myCarousel').length ) {\r\n\r\n  if(/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {\r\n    var fallback = $(\".fallback-container\");\r\n    // if mobile show fallback and return\r\n    fallback.show();\r\n\r\n  } else {\r\n\r\n\r\n      // Load YouTube Frame API\r\n      (function(){ //Closure, to not leak to the scope\r\n        //Load the IFrame Player API code asynchronously.\r\n        var tag = document.createElement('script');\r\n        tag.src = \"https://www.youtube.com/iframe_api\";\r\n        var firstScriptTag = document.getElementsByTagName('script')[0];\r\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n      })();\r\n\r\n\r\n      function getFrameID(id) {\r\n          var elem = document.getElementById(id);\r\n          if (elem) {\r\n              if (/^iframe$/i.test(elem.tagName)) return id; //Frame, OK\r\n              // else: Look for frame\r\n              var elems = elem.getElementsByTagName(\"iframe\");\r\n              if (!elems.length) return null; //No iframe found, FAILURE\r\n              for (var i = 0; i < elems.length; i++) {\r\n                  if (/^https?:\\/\\/(?:www\\.)?youtube(?:-nocookie)?\\.com(\\/|$)/i.test(elems[i].src)) break;\r\n              }\r\n              elem = elems[i]; //The only, or the best iFrame\r\n              if (elem.id) return elem.id; //Existing ID, return it\r\n              // else: Create a new ID\r\n              do { //Keep postfixing `-frame` until the ID is unique\r\n                  id += \"-frame\";\r\n              } while (document.getElementById(id));\r\n              elem.id = id;\r\n              return id;\r\n          }\r\n          // If no element, return null.\r\n          return null;\r\n      }\r\n\r\n\r\n\r\n      // Define YT_ready function.\r\n      var YT_ready = (function() {\r\n          var onReady_funcs = [],\r\n              api_isReady = false;\r\n      /* @param func function     Function to execute on ready\r\n               * @param func Boolean      If true, all qeued functions are executed\r\n               * @param b_before Boolean  If true, the func will added to the first\r\n                                           position in the queue*/\r\n\r\n          return function(func, b_before) {\r\n              if (func === true) {\r\n                  api_isReady = true;\r\n                  for (var i = 0; i < onReady_funcs.length; i++) {\r\n                      // Removes the first func from the array, and execute func\r\n                      onReady_funcs.shift()();\r\n                  }\r\n              }\r\n              else if (typeof func == \"function\") {\r\n                  if (api_isReady) func();\r\n                  else onReady_funcs[b_before ? \"unshift\" : \"push\"](func);\r\n              }\r\n          }\r\n\r\n      })();\r\n\r\n      // This function will be called when the API is fully loaded\r\n      function onYouTubePlayerAPIReady() {\r\n          YT_ready(true)\r\n      }\r\n\r\n      var players = {};\r\n\r\n\r\n      //Define a player storage object, to enable later function calls,\r\n      //  without having to create a new class instance again.\r\n      YT_ready(function() {\r\n          $(\".fallback-container + iframe[id]\").each(function() {\r\n              var identifier = this.id;\r\n              var frameID = getFrameID(identifier);\r\n              if (frameID) { //If the frame exists\r\n                  players[frameID] = new YT.Player(frameID, {\r\n                      events: {\r\n                          \"onReady\": createYTEvent(frameID, identifier)\r\n                      }\r\n                  });\r\n              }\r\n          });\r\n      });\r\n\r\n\r\n\r\n    // Returns a function to enable multiple events\r\n    function createYTEvent(frameID, identifier) {\r\n        return function (event) {\r\n            event.target.mute();\r\n            var player = players[frameID]; // player object\r\n            var the_div = $('#'+identifier).parent();\r\n            var controller = the_div.children(\".video-controls\");\r\n\r\n            //get correct sizes\r\n            resize();\r\n\r\n\r\n              //show video\r\n              $('#'+identifier).show();\r\n              controller.show();\r\n\r\n              // init first slide\r\n              if (frameID == \"frame1\") {\r\n                player.playVideo();\r\n                player.addEventListener('onStateChange', function(state) {\r\n                  if(state.data === 0){\r\n                    player.seekTo(0);\r\n                  }\r\n                });\r\n                controller.click(function() {\r\n                  var that = $(this);\r\n                  if(player.getPlayerState() === 1){\r\n                    player.pauseVideo();\r\n                    that.addClass('pausedState');\r\n                  } else {\r\n                    player.playVideo();\r\n                    that.removeClass('pausedState');\r\n                  }\r\n                });\r\n              }\r\n\r\n              // control videos in slide as carousel is sliding\r\n              $(\"#myCarousel\").on('slid.bs.carousel', function () {\r\n                player.pauseVideo();\r\n                var lastChar = frameID.substr(frameID.length - 1);\r\n                lastChar=lastChar -1;\r\n                if ($('#myCarousel .active').index()==lastChar) {\r\n                  //console.log('isplaying');\r\n                  if (controller.hasClass('pausedState')==false) {\r\n                    player.playVideo();\r\n                  }\r\n                  player.addEventListener('onStateChange', function(state) {\r\n                    if(state.data === 0){\r\n                      player.seekTo(0);\r\n                    }\r\n                  });\r\n                  controller.click(function() {\r\n                    var that = $(this);\r\n                    if(player.getPlayerState() === 1){\r\n                      player.pauseVideo();\r\n                      that.addClass('pausedState');\r\n                    } else {\r\n                      player.playVideo();\r\n                      that.removeClass('pausedState');\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    var ratio = 16/9;\r\n\r\n\r\n    // resize handler updates width, height and offset of playerand cover image after resize/init\r\n    var resize = function() {\r\n      var width = $(window).width(),\r\n          pWidth, // player width, to be defined\r\n          height = 500,\r\n          pHeight, // player height, tbd\r\n          $player = $('.player');\r\n\r\n          // when screen aspect ratio differs from video, video must center and underlay one dimension\r\n\r\n          if (width / ratio < height) { // if new video height < window height (gap underneath)\r\n            pWidth = Math.ceil(height * ratio); // get new player width\r\n            $player.width(pWidth).height(height).css({left: (width - pWidth) / 2, top: 0}); // player width is greater, offset left; reset top\r\n\r\n          } else { // new video width < window width (gap to right)\r\n            pHeight = Math.ceil(width / ratio); // get new player height\r\n            $player.width(width).height(pHeight).css({left: 0, top: (height - pHeight) / 2}); // player height is greater, offset top; reset left\r\n          }\r\n\r\n    };\r\n\r\n    $(window).smartresize(function(){\r\n    \t// code that takes it easy...\r\n    \tresize();\r\n    });\r\n\r\n  }\r\n\r\n}\r\n",
          "comment" : ""
        },
        "redirectURL" : "",
        "headersSize" : 402,
        "bodySize" : 8305,
        "comment" : ""
      },
      "cache" : { },
      "timings" : {
        "comment" : "",
        "connect" : 612,
        "send" : 0,
        "blocked" : 0,
        "wait" : 281,
        "dns" : 0,
        "receive" : 0,
        "ssl" : 608
      },
      "serverIPAddress" : "64.132.44.175",
      "comment" : "",
      "_katalonRequestInformation" : {
        "name" : "296",
        "testObjectId" : "Temporary RESTful request object",
        "harId" : "06efe959-ceb0-4047-ac60-03f1f05bcd78"
      },
      "time" : 894
    } ],
    "comment" : ""
  }
}